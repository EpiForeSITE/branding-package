[{"path":[]},{"path":"https://epiforesite.github.io/branding-package/articles/Accessibility-Guidelines.html","id":"principles","dir":"Articles","previous_headings":"General Design Principles for Accessibility","what":"Principles","title":"Accessibility-Guidelines","text":"Use descriptive alt text non-text content Avoid using color convey meaning Ensure sufficient contrast text UI elements Ensure functions keyboard-accessible Provide clear focus indicators Avoid time-limited interactions unless necessary Use consistent layout predictable navigation Group related controls landmarks (e.g., <main>, <nav>) Use headings (<h1>–<h6>) meaningfully hierarchically Provide downloadable raw data visualizations Use accessible HTML tables present data possible Include text summaries visualizations Reuse layouts component patterns Ensure button/tab behaviors predictable Avoid keyboard traps focus loops","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"https://epiforesite.github.io/branding-package/articles/Accessibility-Guidelines.html","id":"testing-tools","dir":"Articles","previous_headings":"","what":"Testing Tools","title":"Accessibility-Guidelines","text":"free, widely available tools can use evaluate accessibility dashboards: axe DevTools Browser Extension: Runs automated scans developer tools flag WCAG issues suggest fixes right browser. WAVE Browser Extension: Adds ‑page overlay visually marks accessibility errors, alerts, structural cues quick review. WebAIM Contrast Checker: Tests foreground‑background color pair confirm meets WCAG AA/AAA contrast ratios. addition automated tools, always perform manual checks screen reader. Popular options include VoiceOver (macOS/iOS), NVDA (Windows), JAWS (Windows).","code":""},{"path":"https://epiforesite.github.io/branding-package/articles/quarto-templates.html","id":"rmark-a-simple-r-markdown-template-for-one-page-pdf-or-html-reports","dir":"Articles","previous_headings":"","what":"rmark: A simple r markdown template for one-page pdf or html reports","title":"Quarto templates","text":"Install :","code":"rbranding::get_template(\"rmark\")"},{"path":"https://epiforesite.github.io/branding-package/articles/quarto-templates.html","id":"qwebsite-a-simple-website-template-for-quarto","dir":"Articles","previous_headings":"","what":"qwebsite: A simple website template for quarto","title":"Quarto templates","text":"Install :","code":"rbranding::get_template(\"qwebsite\")"},{"path":"https://epiforesite.github.io/branding-package/articles/rbranding.html","id":"in-the-r-console","dir":"Articles","previous_headings":"","what":"In the R console:","title":"rbranding","text":"Install package github (necessary):","code":"#In the r terminal: #Install the package from github (if necessary): >devtools::install_github(\"rbranding/rbranding\") #load the library: >library(rbranding)  #Initialize the rbranding package: >rbranding::init_rbranding()  #get the latest version of the _brand.yml file: >rbranding::get_brand_yaml()  #install the example1 template: >rbranding::install_template(\"example1\")"},{"path":"https://epiforesite.github.io/branding-package/articles/shiny-templates.html","id":"example-1-map-and-table-with-links-to-details","dir":"Articles","previous_headings":"","what":"Example 1: Map and Table with links to details","title":"Shiny Templates","text":"Install :","code":"rbranding::get_template(\"wastewater\")"},{"path":"https://epiforesite.github.io/branding-package/articles/shiny-templates.html","id":"example-2-histogram-with-controls-on-the-left","dir":"Articles","previous_headings":"","what":"Example 2: Histogram with controls on the left","title":"Shiny Templates","text":"Install :","code":"rbranding::get_template(\"shiny2\")"},{"path":"https://epiforesite.github.io/branding-package/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Willy Ray. Author, maintainer.","code":""},{"path":"https://epiforesite.github.io/branding-package/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Ray W (2025). rbranding: Package (Title Case). R package version 0.1.0, https://epiforesite.github.io/branding-package/.","code":"@Manual{,   title = {rbranding: What the Package Does (Title Case)},   author = {Willy Ray},   year = {2025},   note = {R package version 0.1.0},   url = {https://epiforesite.github.io/branding-package/}, }"},{"path":"https://epiforesite.github.io/branding-package/copilot-instructions.html","id":null,"dir":"","previous_headings":"","what":"R Branding Package Developer Instructions","title":"R Branding Package Developer Instructions","text":"ALWAYS follow instructions first fallback additional search bash commands information incomplete found error.","code":""},{"path":"https://epiforesite.github.io/branding-package/copilot-instructions.html","id":"repository-overview","dir":"","previous_headings":"","what":"Repository Overview","title":"R Branding Package Developer Instructions","text":"R package called rbranding facilitates creation Shiny apps CFA projects conforming STLTs’ branding design standards. package provides automated branding configuration, theme management, interactive component linking ForeSITE Shiny applications.","code":""},{"path":"https://epiforesite.github.io/branding-package/copilot-instructions.html","id":"core-package-functions","dir":"","previous_headings":"","what":"Core Package Functions","title":"R Branding Package Developer Instructions","text":"brand_init() - Initializes branding configuration creating config.yml _brand.yml files get_brand() - Downloads/updates latest branding files remote repository user prompts link_leaflet_dt() - Links leaflet maps DT data tables interactive dashboards","code":""},{"path":[]},{"path":"https://epiforesite.github.io/branding-package/copilot-instructions.html","id":"system-requirements","dir":"","previous_headings":"Dependencies and Installation","what":"System Requirements","title":"R Branding Package Developer Instructions","text":"","code":"# Install R and core development tools sudo apt-get update sudo apt-get install -y r-base r-base-dev sudo apt-get install -y libcurl4-openssl-dev libssl-dev libxml2-dev sudo apt-get install -y texlive-latex-base texlive-latex-extra texlive-fonts-extra"},{"path":"https://epiforesite.github.io/branding-package/copilot-instructions.html","id":"r-package-dependencies","dir":"","previous_headings":"Dependencies and Installation","what":"R Package Dependencies","title":"R Branding Package Developer Instructions","text":"CRITICAL: CRAN access fails network errors, normal restricted environments. package builds successfully just apt-installed dependencies.","code":"# Install core R packages via apt (more reliable than CRAN in restricted environments) sudo apt-get install -y r-cran-devtools r-cran-yaml r-cran-shiny r-cran-dt r-cran-htmltools sudo apt-get install -y r-cran-dplyr r-cran-knitr r-cran-rmarkdown r-cran-bslib  # If network access to CRAN is available, install additional packages: sudo Rscript -e \"install.packages(c('leaflet', 'tinytest', 'here', 'pkgdown'), repos='https://cloud.r-project.org/')\""},{"path":[]},{"path":"https://epiforesite.github.io/branding-package/copilot-instructions.html","id":"build-commands","dir":"","previous_headings":"Building and Testing","what":"Build Commands","title":"R Branding Package Developer Instructions","text":"NEVER CANCEL builds tests. Package builds complete 10-15 seconds. Always set appropriate timeouts: - Build/check commands: Set timeout 30+ minutes - Documentation: Set timeout 10+ minutes - Installation: Set timeout 5+ minutes","code":"# Build and check the package - NEVER CANCEL, takes 10-15 seconds _R_CHECK_FORCE_SUGGESTS_=false make check  # Install the package - takes 1 second   sudo make install  # Generate documentation - takes 1.5 seconds make docs  # Build pkgdown website (if pkgdown available) make website"},{"path":"https://epiforesite.github.io/branding-package/copilot-instructions.html","id":"testing","dir":"","previous_headings":"Building and Testing","what":"Testing","title":"R Branding Package Developer Instructions","text":"Note: Current tests path dependency issues. Core package functionality can validated manually.","code":"# Test core package functionality (always works) echo 'library(rbranding); brand_init()' | R --no-save --quiet  # Run unit tests (requires tinytest and proper paths) echo 'library(tinytest); run_test_dir(\"inst/tinytest\")' | R --no-save --quiet"},{"path":[]},{"path":"https://epiforesite.github.io/branding-package/copilot-instructions.html","id":"available-applications","dir":"","previous_headings":"Running Applications","what":"Available Applications","title":"R Branding Package Developer Instructions","text":"Main App: inst/app/app.R - Main branding demonstration app Wastewater Dashboard: inst/examples/wastewater/app.R - Interactive map/table linking Quarto Website: inst/examples/qwebsite/ - Branded Quarto site example R Markdown: inst/examples/rmark/ - Branded R Markdown examples","code":""},{"path":"https://epiforesite.github.io/branding-package/copilot-instructions.html","id":"running-apps-with-script","dir":"","previous_headings":"Running Applications","what":"Running Apps with Script","title":"R Branding Package Developer Instructions","text":"","code":"# Run main app (in inst/app/) ./run_app.sh  # Note: Script looks for inst/app/examples/ but examples are in inst/examples/ # Run examples manually instead: cd inst/examples/wastewater && Rscript app.R  # Get script help ./run_app.sh --help"},{"path":"https://epiforesite.github.io/branding-package/copilot-instructions.html","id":"manual-shiny-app-execution","dir":"","previous_headings":"Running Applications","what":"Manual Shiny App Execution","title":"R Branding Package Developer Instructions","text":"DEPENDENCY LIMITATION: Example apps require leaflet DT packages may available environments. Core package functionality works without .","code":"# For apps requiring full dependencies cd inst/examples/wastewater Rscript -e \"shiny::runApp('app.R', host='0.0.0.0', port=3838)\""},{"path":[]},{"path":"https://epiforesite.github.io/branding-package/copilot-instructions.html","id":"always-test-after-making-changes","dir":"","previous_headings":"Validation Scenarios","what":"ALWAYS Test After Making Changes","title":"R Branding Package Developer Instructions","text":"Build Validation: Must complete successfully 10-15 seconds. Core Function Test: create config.yml _brand.yml files. Package Help Test: display package information function index. Documentation Test: complete without errors 1.5 seconds.","code":"_R_CHECK_FORCE_SUGGESTS_=false make check echo 'library(rbranding); brand_init()' | R --no-save --quiet echo 'library(rbranding); help(package=\"rbranding\")' | R --no-save --quiet make docs"},{"path":"https://epiforesite.github.io/branding-package/copilot-instructions.html","id":"manual-testing-workflow","dir":"","previous_headings":"Validation Scenarios","what":"Manual Testing Workflow","title":"R Branding Package Developer Instructions","text":"dependencies available (common restricted environments): 1. Test core package functions: bash    echo 'library(rbranding); brand_init()' | R ---save --quiet create config.yml _brand.yml files without errors. Test package loading help: dependencies available (full environment): 1. Navigate inst/examples/wastewater/ 2. Start Shiny app: Rscript -e \"shiny::runApp('app.R')\" 3. Test interactive features: - Click map markers verify table row selection - Click table rows verify map marker highlighting - Verify details panel updates correctly - Test multiple locations Note: Main app inst/app/app.R currently structural issues. Use example apps testing.","code":"echo 'library(rbranding); help(package=\"rbranding\")' | R --no-save --quiet"},{"path":[]},{"path":"https://epiforesite.github.io/branding-package/copilot-instructions.html","id":"key-directories","dir":"","previous_headings":"Repository Structure","what":"Key Directories","title":"R Branding Package Developer Instructions","text":"R/ - Package source code (get_repo.R, get_template.R, link_plots.R) inst/examples/ - Example applications demonstrating package usage inst/tinytest/ - Unit tests using tinytest framework man/ - Generated documentation files vignettes/ - Package vignettes tutorials .github/workflows/ - CI/CD pipelines (R-CMD-check.yaml, pkgdown.yaml)","code":""},{"path":"https://epiforesite.github.io/branding-package/copilot-instructions.html","id":"important-files","dir":"","previous_headings":"Repository Structure","what":"Important Files","title":"R Branding Package Developer Instructions","text":"DESCRIPTION - Package metadata dependencies Makefile - Build automation (check, install, docs, example targets) run_app.sh - Script running example applications _brand.yml - Default branding configuration config.yml - Package configuration template","code":""},{"path":[]},{"path":"https://epiforesite.github.io/branding-package/copilot-instructions.html","id":"build-failures","dir":"","previous_headings":"Common Issues and Solutions","what":"Build Failures","title":"R Branding Package Developer Instructions","text":"Missing leaflet: Normal restricted environments. Use _R_CHECK_FORCE_SUGGESTS_=false flag. LaTeX errors: Install texlive-fonts-extra package. Permission errors: Use sudo system-wide R package installation.","code":""},{"path":"https://epiforesite.github.io/branding-package/copilot-instructions.html","id":"network-issues","dir":"","previous_headings":"Common Issues and Solutions","what":"Network Issues","title":"R Branding Package Developer Instructions","text":"CRAN access blocked: Use apt packages instead CRAN possible. Download failures get_brand(): Normal behavior, function includes error handling.","code":""},{"path":"https://epiforesite.github.io/branding-package/copilot-instructions.html","id":"application-issues","dir":"","previous_headings":"Common Issues and Solutions","what":"Application Issues","title":"R Branding Package Developer Instructions","text":"Missing leaflet/DT: Example apps require packages. Core package functions work without . Port conflicts: Default Shiny port 3838, change needed.","code":""},{"path":[]},{"path":"https://epiforesite.github.io/branding-package/copilot-instructions.html","id":"github-workflows","dir":"","previous_headings":"CI/CD Information","what":"GitHub Workflows","title":"R Branding Package Developer Instructions","text":"R-CMD-check.yaml: Runs push/PR, tests across multiple R versions OS pkgdown.yaml: Builds deploys package documentation website","code":""},{"path":"https://epiforesite.github.io/branding-package/copilot-instructions.html","id":"build-matrix","dir":"","previous_headings":"CI/CD Information","what":"Build Matrix","title":"R Branding Package Developer Instructions","text":"Tests run : - macOS (latest R) - Windows (latest R) - Ubuntu (devel, release, oldrel-1)","code":""},{"path":[]},{"path":"https://epiforesite.github.io/branding-package/copilot-instructions.html","id":"making-changes","dir":"","previous_headings":"Development Workflow","what":"Making Changes","title":"R Branding Package Developer Instructions","text":"Always run build validation first: _R_CHECK_FORCE_SUGGESTS_=false make check Test core functionality: echo 'library(rbranding); brand_init()' | R ---save --quiet Update documentation needed: make docs Validate changes don’t break existing functionality Test example apps dependencies available","code":""},{"path":"https://epiforesite.github.io/branding-package/copilot-instructions.html","id":"before-committing","dir":"","previous_headings":"Development Workflow","what":"Before Committing","title":"R Branding Package Developer Instructions","text":"Ensure package builds successfully Run documentation generation Test core package functions Verify new errors introduced check process","code":""},{"path":"https://epiforesite.github.io/branding-package/copilot-instructions.html","id":"time-expectations","dir":"","previous_headings":"","what":"Time Expectations","title":"R Branding Package Developer Instructions","text":"Package check: 10-15 seconds Package install: 1 second Documentation: 1.5 seconds Dependency installation: 2-5 minutes (network available) Example app startup: 5-10 seconds (dependencies available) ALWAYS wait completion. NEVER CANCEL long-running commands.","code":""},{"path":"https://epiforesite.github.io/branding-package/index.html","id":"branding-package","dir":"","previous_headings":"","what":"What the Package Does (Title Case)","title":"What the Package Does (Title Case)","text":"Facilitate creation Shiny apps CFA projects conform STLTs’ branding design standards, automatically provide much accessibility ForeSITE Shiny apps possible.","code":""},{"path":"https://epiforesite.github.io/branding-package/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"What the Package Does (Title Case)","text":"branding-package helps R developers quickly build Shiny applications visually consistent, accessible, easy maintain. provides tools manage branding assets, apply organization-wide themes, streamline setup new projects.","code":""},{"path":"https://epiforesite.github.io/branding-package/index.html","id":"project-features-and-aspirations","dir":"","previous_headings":"","what":"Project Features and aspirations","title":"What the Package Does (Title Case)","text":"Branding File Management: Download, update, validate branding YAML files consistent theming. Shiny App Templates: Quickly scaffold Shiny apps follow best practices branding accessibility. Accessibility: Built-support accessible color palettes UI components. Integration: Easily integrates bslib, thematic, modern R packages.","code":""},{"path":"https://epiforesite.github.io/branding-package/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"What the Package Does (Title Case)","text":"Note: brand_init() get_brand() intended run interactively R console, inside scripts. Load branding YAML apply theme UI/server code.","code":"# Install from GitHub (if not on CRAN) remotes::install_github(\"EpiForeSITE/branding-package\")  # Initialize branding config (run in the R console) library(rbranding) brand_init() # You may edit the generated config.yml file if necessary.  # Update or fetch the latest branding file (run in the R console) get_brand()"},{"path":"https://epiforesite.github.io/branding-package/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"What the Package Does (Title Case)","text":"Function documentation available via ?get_brand ?brand_init loading package. See pkgdown site full reference vignettes.","code":""},{"path":"https://epiforesite.github.io/branding-package/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"What the Package Does (Title Case)","text":"Pull requests issues welcome! Please see CONTRIBUTING.md guidelines.","code":""},{"path":"https://epiforesite.github.io/branding-package/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"What the Package Does (Title Case)","text":"MIT","code":""},{"path":"https://epiforesite.github.io/branding-package/reference/brand_init.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize Branding Config — brand_init","title":"Initialize Branding Config — brand_init","text":"Initializes branding creating config.yml file remote local file paths, placeholder _brand.yml file.","code":""},{"path":"https://epiforesite.github.io/branding-package/reference/brand_init.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize Branding Config — brand_init","text":"","code":"brand_init()"},{"path":"https://epiforesite.github.io/branding-package/reference/brand_init.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize Branding Config — brand_init","text":"return value. Side effects: creates config.yml _brand.yml.","code":""},{"path":"https://epiforesite.github.io/branding-package/reference/brand_init.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Initialize Branding Config — brand_init","text":"function intended run set configuration branding file management.","code":""},{"path":"https://epiforesite.github.io/branding-package/reference/brand_init.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize Branding Config — brand_init","text":"","code":"brand_init()"},{"path":"https://epiforesite.github.io/branding-package/reference/get_brand.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the Latest Branding File — get_brand","title":"Get the Latest Branding File — get_brand","text":"Downloads latest _brand.yml file repository compares local _brand.yml file. different, prompts user overwrite local file. local file exist, created.","code":""},{"path":"https://epiforesite.github.io/branding-package/reference/get_brand.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the Latest Branding File — get_brand","text":"","code":"get_brand()"},{"path":"https://epiforesite.github.io/branding-package/reference/get_brand.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the Latest Branding File — get_brand","text":"return value. Side effects: may overwrite _brand.yml create bak_brand.yml.","code":""},{"path":"https://epiforesite.github.io/branding-package/reference/get_brand.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get the Latest Branding File — get_brand","text":"Reads configuration config.yml. Handles download errors file comparison using MD5 hashes. Prompts user action files differ.","code":""},{"path":"https://epiforesite.github.io/branding-package/reference/get_brand.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the Latest Branding File — get_brand","text":"","code":"# Initialize config and local brand file brand_init() # Update local brand file if needed get_brand() #> Checking remote version...  #> The local file is different from the remote file. #> 1: Overwrite the local file with the remote file #> 2: Overwrite the local file with the remote file and save a backup to bak_brand.yml #> 3: Do nothing #>  #> Please Select an option: (1/2/3):  #>"},{"path":"https://epiforesite.github.io/branding-package/reference/get_template.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Shiny Templates Copy Example App Files from inst/examples to inst/app — get_template","title":"Get Shiny Templates Copy Example App Files from inst/examples to inst/app — get_template","text":"Get Shiny Templates Copy Example App Files inst/examples inst/app","code":""},{"path":"https://epiforesite.github.io/branding-package/reference/get_template.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Shiny Templates Copy Example App Files from inst/examples to inst/app — get_template","text":"","code":"get_template(example_name)"},{"path":"https://epiforesite.github.io/branding-package/reference/get_template.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Shiny Templates Copy Example App Files from inst/examples to inst/app — get_template","text":"example_name Name example folder inst/examples","code":""},{"path":"https://epiforesite.github.io/branding-package/reference/link_leaflet_dt.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a two-way link between a Leaflet map and a DT datatable. — link_leaflet_dt","title":"Create a two-way link between a Leaflet map and a DT datatable. — link_leaflet_dt","text":"function sets observers : Clicking marker Leaflet map select corresponding row DT table. Selecting row DT table highlight corresponding marker Leaflet map fly map marker.","code":""},{"path":"https://epiforesite.github.io/branding-package/reference/link_leaflet_dt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a two-way link between a Leaflet map and a DT datatable. — link_leaflet_dt","text":"","code":"link_leaflet_dt(   input,   session,   leaflet_output_id,   dt_output_id,   shared_id_column,   leaflet_data_reactive,   dt_data_reactive,   map_lng_col = \"longitude\",   map_lat_col = \"latitude\",   highlight_zoom = 12,   highlight_icon = leaflet::awesomeIcons(icon = \"star\", library = \"glyphicon\",     markerColor = \"red\", iconColor = \"#FFFFFF\") )"},{"path":"https://epiforesite.github.io/branding-package/reference/link_leaflet_dt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a two-way link between a Leaflet map and a DT datatable. — link_leaflet_dt","text":"input Shiny input object server function. session Shiny session object server function. leaflet_output_id character string: outputId leafletOutput. Example: \"myMap\". dt_output_id character string: outputId DT::DTOutput. Example: \"myTable\". shared_id_column character string: name column present Leaflet data DT data. column must contain unique identifiers item. creating Leaflet map, ensure set layerId markers (shapes) values column. Example: addMarkers(..., layerId = ~my_unique_id_column). leaflet_data_reactive reactive expression returns data frame used generate Leaflet map. data frame MUST contain shared_id_column columns specified map_lng_col map_lat_col. Example: reactive({ my_spatial_data_frame }). dt_data_reactive reactive expression returns data frame displayed DT table. data frame MUST contain shared_id_column. Example: reactive({ my_table_data_frame }). map_lng_col (Optional) character string: name column leaflet_data_reactive contains longitude values map markers. Defaults \"longitude\". map_lat_col (Optional) character string: name column leaflet_data_reactive contains latitude values map markers. Defaults \"latitude\". highlight_zoom (Optional) integer: zoom level map fly marker highlighted. Defaults 12. highlight_icon (Optional) icon object created leaflet::awesomeIcons() (leaflet::makeAwesomeIcon(), leaflet::icons()) use highlighted marker map. Defaults red star icon.","code":""},{"path":"https://epiforesite.github.io/branding-package/reference/link_leaflet_dt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a two-way link between a Leaflet map and a DT datatable. — link_leaflet_dt","text":"function return value. called side effects, set reactive observers link map table.","code":""},{"path":"https://epiforesite.github.io/branding-package/reference/link_leaflet_dt.html","id":"important-notes-for-users","dir":"Reference","previous_headings":"","what":"Important Notes for Users","title":"Create a two-way link between a Leaflet map and a DT datatable. — link_leaflet_dt","text":"layerId Crucial: map--table link work, Leaflet markers (circles, polygons, etc.) must layerId aesthetic mapped shared_id_column. example: leaflet() %>% addMarkers(data = my_data, layerId = ~my_id_column, ...) Unique IDs: values shared_id_column unique location/item ensure correct linking. Data Reactivity: leaflet_data_reactive dt_data_reactive must reactive expressions (e.g., created reactive({...})). allows linking work even underlying data changes. DT Selection Mode: best results, set DT table single row selection: DT::datatable(..., selection = 'single'). function currently focuses first selected row multiple somehow selected.","code":""},{"path":"https://epiforesite.github.io/branding-package/reference/link_leaflet_dt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a two-way link between a Leaflet map and a DT datatable. — link_leaflet_dt","text":"","code":"if (FALSE) { # \\dontrun{   # Running an app we have included in the package   fn_app <- system.file(     \"examples\", \"link_plots.R\",     package = \"rbranding\"   )    shiny::runApp(fn_app) } # }"}]
