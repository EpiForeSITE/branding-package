% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/link_plots.R
\name{linkLeafletDT}
\alias{linkLeafletDT}
\title{Create a two-way link between a Leaflet map and a DT datatable.}
\usage{
linkLeafletDT(
  input,
  session,
  leaflet_output_id,
  dt_output_id,
  shared_id_column,
  leaflet_data_reactive,
  dt_data_reactive,
  map_lng_col = "longitude",
  map_lat_col = "latitude",
  highlight_zoom = 12,
  highlight_icon = leaflet::awesomeIcons(icon = "star", library = "glyphicon",
    markerColor = "red", iconColor = "#FFFFFF")
)
}
\arguments{
\item{input}{The Shiny \code{input} object from your server function.}

\item{session}{The Shiny \code{session} object from your server function.}

\item{leaflet_output_id}{A character string: the \code{outputId} of your \code{leafletOutput}.
Example: "myMap".}

\item{dt_output_id}{A character string: the \code{outputId} of your \code{DT::DTOutput}.
Example: "myTable".}

\item{shared_id_column}{A character string: the name of the column that is present
in \emph{both} the Leaflet data and the DT data. This column must contain unique
identifiers for each item. When creating your Leaflet map, ensure you set the
\code{layerId} for your markers (or other shapes) to the values from this column.
Example: \code{addMarkers(..., layerId = ~my_unique_id_column)}.}

\item{leaflet_data_reactive}{A reactive expression that returns the data frame
used to generate the Leaflet map. This data frame MUST contain the
\code{shared_id_column} and the columns specified by \code{map_lng_col} and \code{map_lat_col}.
Example: \code{reactive({ my_spatial_data_frame })}.}

\item{dt_data_reactive}{A reactive expression that returns the data frame
displayed in the DT table. This data frame MUST contain the \code{shared_id_column}.
Example: \code{reactive({ my_table_data_frame })}.}

\item{map_lng_col}{(Optional) A character string: the name of the column in
\code{leaflet_data_reactive} that contains the longitude values for the map markers.
Defaults to "longitude".}

\item{map_lat_col}{(Optional) A character string: the name of the column in
\code{leaflet_data_reactive} that contains the latitude values for the map markers.
Defaults to "latitude".}

\item{highlight_zoom}{(Optional) An integer: the zoom level the map will fly to
when a marker is highlighted. Defaults to 12.}

\item{highlight_icon}{(Optional) An icon object created by \code{leaflet::awesomeIcons()}
(or \code{leaflet::makeAwesomeIcon()}, \code{leaflet::icons()}) to use for the highlighted
marker on the map. Defaults to a red star icon.}
}
\value{
This function does not return a value. It is called for its side effects,
which are to set up the reactive observers that link the map and table.
}
\description{
This function sets up observers so that:
\enumerate{
\item Clicking a marker on the Leaflet map will select the corresponding row in the DT table.
\item Selecting a row in the DT table will highlight the corresponding marker on the
Leaflet map and fly the map to that marker.
}
}
\section{Important Notes for Users}{

\itemize{
\item \strong{\code{layerId} is Crucial:} For the map-to-table link to work, your Leaflet markers
(or circles, polygons, etc.) \emph{must} have their \code{layerId} aesthetic mapped to the
\code{shared_id_column}. For example:
\code{leaflet() \%>\% addMarkers(data = my_data, layerId = ~my_id_column, ...)}
\item \strong{Unique IDs:} The values in your \code{shared_id_column} should be unique for each
location/item to ensure correct linking.
\item \strong{Data Reactivity:} Both \code{leaflet_data_reactive} and \code{dt_data_reactive} must be
reactive expressions (e.g., created with \code{reactive({...})}). This allows the
linking to work even if your underlying data changes.
\item \strong{DT Selection Mode:} For best results, set your DT table to single row selection:
\code{DT::datatable(..., selection = 'single')}. The function currently focuses on the
first selected row if multiple are somehow selected.
}
}

\examples{
\dontrun{
  # Running an app we have included in the package
  fn_app <- system.file(
    "examples", "link_plots.R",
    package = "rbranding"
  )

  shiny::runApp(fn_app)
}
}
